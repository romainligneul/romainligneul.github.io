[
  {
    "objectID": "en/index.html",
    "href": "en/index.html",
    "title": "Romain Ligneul",
    "section": "",
    "text": "Neuroscientist, geek, (blog) writer, et al.\n\n\n\n\n\n\n\nNote\n\n\n\nPour voir ma page web en français, cliquez ici:  Les versions françaises et anglaises de ce site diffèrent significativement.\n\n\nThe French version of this website is much more developed at the moment, and it is less oriented towards academia.\nFor more information about me, you may already check the following websites:\n\nMy research group: https://www.adaptivecontrol.org\nThe team that hosts my research group: https://cophyteam.wixsite.com/website-1/\nThe institute that hosts my team: https://www.crnl.fr/en?language=en\nThe institution that runs my institute: https://www.inserm.fr/\nThe ministry that run my institution: https://www.enseignementsup-recherche.gouv.fr/fr\nThe European institution that generously funded my group: https://erc.europa.eu/homepage\n\nYou may check the website of the startup that I founded a few years ago with my partner-in-crime Daniela Domingues, aka @neurodaniela.\n\nTo contact me:\nEmail: romain.ligneul@gmail.com\nOther handles:   \nOr leave me a message below (public, requires a Github account)"
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "",
    "text": "Note\n\n\n\nThis tutorial was written to help my colleagues access our local cluster CRNL (FR), but as long as you have a cluster equipped with SLURM, the tutorial should also work smoothly on your infrastructure.\nThis tutorial will help you to set up your personal Python environment and hopefully improve your way of using it on a compute cluster."
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html#install-miniconda-to-manage-your-virtual-environment",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html#install-miniconda-to-manage-your-virtual-environment",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "Install miniconda to manage your virtual environment",
    "text": "Install miniconda to manage your virtual environment\nInstalling miniconda is not incompatible with using venv later on.\nOpen a terminal and type the following commands:  cd ~ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh bash Miniconda3-latest-Linux-x86_64.sh source ~/.bashrc\nFollow the instructions and say yes to everything (you make press Ctrl+C once followed by Enter to skip the text faster)\nNB: In JupyterLab, you can open a new terminal at ‘File-&gt;New-&gt;Terminal’. You can then bring this terminal just below your notebook by clicking on its tab and dragging it toward the lower part of the window."
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html#create-your-first-conda-environment",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html#create-your-first-conda-environment",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "Create your first conda environment",
    "text": "Create your first conda environment\nStill in the terminal, type:  conda create -n crnlenv python=3.9  conda activate crnlenv\nThe crnlenv virtual environment is active! Everything that will be installed from now on will only be accessible when crnlenv has been activated"
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html#make-your-conda-environment-visible-to-jupyter-lab",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html#make-your-conda-environment-visible-to-jupyter-lab",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "Make your conda environment visible to Jupyter lab",
    "text": "Make your conda environment visible to Jupyter lab\nStill in the terminal type:  conda install ipykernel  python -m ipykernel install --user --name crnlenv --display-name \"Python (crnlenv)\"\nThis commands allow your kernel to be accessed from Jupyter Lab, not only from the command line. If you create more conda environments / kernels, you will also have to run these lines"
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html#populate-your-conda-environment-kernel-with-essential-tools",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html#populate-your-conda-environment-kernel-with-essential-tools",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "Populate your conda environment / kernel with essential tools",
    "text": "Populate your conda environment / kernel with essential tools\nInstall a package that allow to submit your jobs easily from any Jupyter notebook on Slurm conda install submitit\nInstall numpy  conda install numpy\nInstall a memory_profiler pip install memory_profiler -U\nLater on you could install various other tools in your virtual environment, but the priority is to check that you can use the cluster and distribute your jobs.\nNB: if you wonder why install alternatively with conda or pip, the answer is: you can almost always do it with pip but if it works with conda, the package might be “better” installed in some case."
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html#lets-start-computing",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html#lets-start-computing",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "Let’s start computing",
    "text": "Let’s start computing\nSince we had , you should be able to see the crnlenv in Jupyterlab if you go in “Kernel-&gt;Change Kernel”.\nSelect it and then restart the kernel (“Kernel-&gt;Restart Kernel”) to continue this tutorial.\nOn the top right of this window, you should see something like “Python (crnlenv)”. It means your notebook is running in the right virtual environment!\nFrom now on, you will execute the code cells below, in order. You can do it either by pressing the play button (at the top of the notebook) or by clicking in the target cell and pressing Shift+Enter.\nYou may also want to check the tutorials of the module submitit used here.\n\n###### Import packages/modules\nimport submitit\n# memory profiler to evaluate how much your jobs demand\nfrom memory_profiler import memory_usage\n# import garbage collector: it is sometimes useful to trigger the garbage collector manually with gc.collect()\nimport gc\n# import other modules\nimport time\n\n\n###### Define a function that should run on the cluster\n\n# this specific function is very dumb and only for demonstration purposes\n# we will just feed it with a number and a string, but we could pass any object to it (filepath, DataFrames, etc.)\n# here, the function only return one argument but it could return several (result result1, result2)\ndef yourFunction(argument1, argument2):\n\n    # print something to the log\n    print('I am running with argument1=' + str(argument1))\n    \n    # sleep for the duration specified by argument1\n    # just to illustrate the parallel processing implemented\n    time.sleep(argument1)\n    \n    # we simply duplicate argument2 as a function of argument1 and return it as our results\n    results=''\n    for i in range(argument1):\n        results=results+'_'+argument2\n    return results\n\n\n# check time and memory usage of your function\n# ideally, try to test it with the input values that will produce the biggest memory consumption\nstart_time = time.time()\nmem_usage=memory_usage((yourFunction, (3,'consumption',)))\nend_time = time.time()\nprint('Maximum memory usage (in MB): %s' % max(mem_usage))\nprint('Maximum memory usage (in GB): %s' % (max(mem_usage)/1000))\nprint('Time taken (in s): %s' % (end_time-start_time))\n\n\n#### Set some environment variables for our jobs\n### for some reason, some default values are set on the cluster, which do not match \n### each other and submitit will complain\nimport os\nos.environ['SLURM_CPUS_PER_TASK'] = '1'\nos.environ['SLURM_TRES_PER_TASK'] = os.environ['SLURM_CPUS_PER_TASK']\n\n\n#### define some array for which each item will be associated with an independent job on the cluster\n#### when you execute this cells, the jobs are sent to the cluster \n\n# here we define an array of numbers: since this array will be used to feed the first argument of yourFunction\n# and that yourFunction waits for as many second as its first argument, the jobs will return in the wrong order\n# (with the output of the second call about 20s after the first one!)\narray_parallel=[1, 20, 2, 5]\n\n# define an additional parameter to be passed to the function\nadditional_parameter='whatever'\n\n# define a variable that will be outside the scope of the function\nvariable_outside_scope = 'something'\n\n# initialize a list in which our returning jobs will be stored\njoblist=[]\n\n# loop over array_parallel\nprint('#### Start submitting jobs #####')\njcount=0\nfor i, value in enumerate(array_parallel):\n    \n  # executor is the submission interface (logs are dumped in the folder)\n  executor = submitit.AutoExecutor(folder=os.getcwd()+'/tuto_logs/')\n  \n  # set memory, timeout in min, and partition for running the job\n  # if you expect your job to be longer or to require more memory: you will need to increase corresponding values\n  # however, note that increase mem_gb too much is an antisocial selfish behavior :)\n  executor.update_parameters(mem_gb=1, timeout_min=5, slurm_partition=\"CPU\")\n  \n  # actually submit the job: note that \"value\" correspond to that of array_parallel in this iteration\n  job = executor.submit(yourFunction, value, additional_parameter)\n  \n  # add info about job submission order\n  job.job_initial_indice=i \n  \n  # print the ID of your job\n  print(\"submit job\" + str(job.job_id))  \n\n  # append the job to the joblist\n  joblist.append(job)\n\n  # increase the job count\n  jcount=jcount+1\n\n\n### now that the loop has ended we check whether any job is already done\nprint('#### Start waiting for jobs to return #####')\nnjobs_finished = sum(job.done() for job in joblist)\n\n# decide whether we clean our job live or not\nclean_jobs_live=False\n\n# create a list to store finished jobs (optional, and depends on whether we need to cleanup job live)\nfinished_list=[]\nfinished_order=[]\n\n### now we will keep looking for a new finished job until all jobs are done:\nnjobs_finished=0\nwhile njobs_finished&lt;jcount:\n  doneIdx=-1\n  for j, job in enumerate(joblist):\n    if job.done():\n      doneIdx=j\n      break\n  if doneIdx&gt;=0:\n    print(str(1+njobs_finished)+' on ' + str(jcount))\n    # report last job finished\n    print(\"last job finished: \" + job.job_id)\n    # obtain result from job\n    job_result=job.result()\n    # do some processing with this job (we could directly do print(job.results() though obviously!)\n    print(job_result)\n    # decide what to do with the finished job object\n    if clean_jobs_live:\n      # delete the job object\n      del job\n      # collect all the garbage immediately to spare memory\n      gc.collect()\n    else:\n      # if we decided to keep the jobs in a list for further processing, add it finished job list \n      finished_list.append(job)\n      finished_order.append(job.job_initial_indice)\n    # increment the count of finished jobs\n    njobs_finished=njobs_finished+1\n    # remove this finished job from the initial joblist\n    joblist.pop(doneIdx)\n    \nprint('#### All jobs completed #####')\n### If we chose to keep our job results for subsequent processing, it will often be crucial to reorder as a function of their initial\n### submission order, rather than their return order (from the cluster). Here we only keep the results of the job\nif clean_jobs_live==False:\n  finished_results = [finished_list[finished_order[i]].result() for i in finished_order]\n  print('Concatenated results obtained by applying yourFunction() to all items in array_parallel:')\n  print(finished_results)\n\n\nNext part\nClick here to go to Part 2"
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part1.html#comments-questions",
    "href": "en/codes_tutos/Tutorial_Cluster_Part1.html#comments-questions",
    "title": "Part 1: clean start on SLURM clusters with Python",
    "section": "Comments, questions?",
    "text": "Comments, questions?\nIf you have a Github account you can comment below."
  },
  {
    "objectID": "en/codes.html",
    "href": "en/codes.html",
    "title": "RL | Codes",
    "section": "",
    "text": "Warning\n\n\n\nThis page is under construction.\n\n\n\nTutorial on SLURM clusters + interactive notebooks\nPart 1\nPart 2\n\n\nIf you want to reuse this website\nThe codebase is available here:\nhttps://github.com/romainligneul/romainligneul.github.io\nYou’ll have to install Quarto.\nIf you want to deploy it on Github pages, follow this tutorial:\nhttps://quarto.org/docs/publishing/github-pages.html\nQuarto is very powerful but also very upsetting, so be prepared.\nAt some point, I might provide a blank template for this multilingual version of the Quarto website utility, depending on interest. So, please leave a comment below if that’s your case.\n\n\nOther codes\nFor now, if you are interested in my code, you can visit my Github account (it’s a mess) https://github.com/romainligneul\nOr the Github account of my start-up RobustCircuit (it’s a mess too) https://github.com/robustcircuit\nIt is more oriented towards web experiments using Javascript/jsPsych and some SVG manipulation logics using D3.js"
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part2.html",
    "href": "en/codes_tutos/Tutorial_Cluster_Part2.html",
    "title": "Part 2: Good job submission practice on SLURM clusters",
    "section": "",
    "text": "Note\n\n\n\nThis tutorial was written to help my colleagues access our local cluster CRNL (FR), but as long as you have a cluster equipped with SLURM, the tutorial should also work smoothly on your infrastructure.\nIf you managed to complete the first part of this tutorial, you will also be able to pip install whatever in your virtual environment and do some computing. However, there is more to know."
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part2.html#sharing-the-resources",
    "href": "en/codes_tutos/Tutorial_Cluster_Part2.html#sharing-the-resources",
    "title": "Part 2: Good job submission practice on SLURM clusters",
    "section": "Sharing the resources",
    "text": "Sharing the resources\nBecause it needs to remain highly flexible and adapted to a wide range of needs, the cluster is not very constrained with respect to resource allocation.\nIf you do not pay attention, you might monopolize all the CPUs or all the memory with your jobs, without leaving anything behind for your colleagues.\nThat why evaluating the amount of memory you need and the maximum time that a non-bugged job might take is important! Based on this information, you can adjust mem_gb and timeout_min (timeout in minutes) well.\nSimilarly, you may need to decide how many CPUs will be useful for you. Can you go with only one without losing much? Then use only 1. Do you divide your computation time by a huge factor if you use more, then use more. But how will you know?\nWhat follows should help you with all this.\n\nAnticipating time-memory consumption\nHereafter, we use memory_usage, which has a slighty unusual way of passing arguments to its target function. All positional arguments (those without an = sign in the def) are passed together, and all non-positional arguments (also called key-pairs) are passed together. For example, we could try: mem_usage=memory_usage((somefunc,(0.1,4,0.88), {'file' : 'whatever.csv','index' : 0 }))  If we had a function defined like this:  somefunc(a,b,c, file=None, index=-1)\n\n###### simple memory/time check\nfrom memory_profiler import memory_usage\nimport time\n\n# define a single thread function\ndef duplicate_ones(a, n=100, x=0):\n    import time\n    time.sleep(1)\n    b = [a] * n\n    b = [a] * n\n    b = [a] * n\n    time.sleep(1)\n    return b\n\n# duplicate ones a million time\nprint('Duplicate ones a thousand times')\nstart_time = time.time()\nmem_usage=memory_usage((duplicate_ones,(1,), {'n' : int(1e3)}))\nend_time = time.time()\nprint('Maximum memory usage (in MB): %s' % max(mem_usage))\nprint('Maximum memory usage (in GB): %s' % (max(mem_usage)/1000))\nprint('Time taken (in s): %s' % (end_time-start_time))\n\n# duplicate ones 100 million times\nprint('Duplicate ones a million time')\nstart_time = time.time()\nmem_usage=memory_usage((duplicate_ones,(1,), {'n' : int(1e8)}))\nend_time = time.time()\nprint('Maximum memory usage (in MB): %s' % max(mem_usage))\nprint('Maximum memory usage (in GB): %s' % (max(mem_usage)/1000))\nprint('Time taken (in s): %s' % (end_time-start_time))\n\nprint('Do you notice the difference in time and memory due to the change in duplication size?')\n\n\n\nEvaluating CPU count needs\nHow to evaluate whether our job will benefit from having more CPU available to them? If you don’t know whether your function use parallelization or not, because you relies on high-level toolboxes, then you can evaluate that empirically by looking at the time your jobs take depending on the number of CPUs you allow.\nLet’s try first with our last function. It should take about 10s to run.\n\nimport os \nimport submitit\n\n# these commands may not be necessary but helped overcoming an error initially\nos.environ['SLURM_CPUS_PER_TASK'] = str(1)\nos.environ['SLURM_TRES_PER_TASK'] = os.environ['SLURM_CPUS_PER_TASK']\n    \n# cpu counts to test\nnCPUs_totest=[1, 4]\n\n# loop over cpu counts\njcount=0\njoblist=[]\nstart_time = time.time()\nfor i, cpus in enumerate(nCPUs_totest):\n    executor = submitit.AutoExecutor(folder=os.getcwd()+'/tuto_logs/')\n    executor.update_parameters(mem_gb=4, timeout_min=5, slurm_partition=\"CPU\", cpus_per_task=cpus)\n    job = executor.submit(duplicate_ones, 1, int(1e8))\n    job.n_cpus=cpus\n    print(\"job with \" + str(job.n_cpus) + \" cpus submitted\")\n    joblist.append(job)\n    jcount=jcount+1\n\n# wait for job completion\nnjobs_finished = sum(job.done() for job in joblist)\nwhile njobs_finished&lt;jcount:\n    doneIdx=-1\n    time.sleep(1)\n    for j, job in enumerate(joblist):\n        if job.done():\n            doneIdx=j\n            break\n    if doneIdx&gt;=0:\n        print(str(njobs_finished)+' on ' + str(jcount))\n        # report last job finished\n        print(\"job with \" + str(job.n_cpus) + \" cpus returned in \" + str(time.time()-start_time) + \" seconds\")\n        joblist.pop(doneIdx)\n        njobs_finished=njobs_finished+1\n\nprint('### Do you think that increasing the number of CPUs made a big difference? ###')\n\nNow let’s redo exactly the same thing, with with a numpy function may benefit from multiple CPUs (i.e. np.dot).\n\nimport numpy as np\nimport time\n\ndef mat_multiply(size):\n  # Generate large random matrices\n  A = np.random.rand(size, size)\n  B = np.random.rand(size, size)\n\n  # Measure time for matrix multiplication\n  C = np.dot(A, B)\n  \n  return 'this function does not return anything special'\n  \nos.environ['SLURM_CPUS_PER_TASK'] = str(1)\nos.environ['SLURM_TRES_PER_TASK'] = os.environ['SLURM_CPUS_PER_TASK']\n\n# cpu counts to test\nnCPUs_totest=[4, 4, 4, 1]\n\n# define the max number of jobs that may run in parallel\nmaxjobs=2\n\n# loop over cpu counts\njcount=0\njoblist=[]\nstart_time = time.time()\nfor i, cpus in enumerate(nCPUs_totest):\n    executor = submitit.AutoExecutor(folder=os.getcwd()+'/tuto_logs/')\n    executor.update_parameters(mem_gb=4, timeout_min=5, slurm_partition=\"CPU\", cpus_per_task=cpus)\n    # check how many job are running (not done) and wait it they exceed our limit\n    while sum(not job.done() for job in joblist)&gt;maxjobs:\n        print('wait to submit new job')\n        time.sleep(3)\n    job = executor.submit(mat_multiply, 8000)\n    time.sleep(0.5)\n    job.n_cpus=cpus\n    print(\"job with \" + str(job.n_cpus) + \" cpus submitted\")\n    joblist.append(job)\n    jcount=jcount+1\n\n# wait for job completion\nnjobs_finished = 0; \nwhile njobs_finished&lt;jcount:\n    doneIdx=-1\n    time.sleep(1)\n    for j, job in enumerate(joblist):\n        if job.done():\n            doneIdx=j\n            break\n    if doneIdx&gt;=0:\n        print(str(njobs_finished)+' on ' + str(jcount))\n        # report last job finished and print stats\n        print(\"job with \" + str(job.n_cpus) + \" cpus returned in \" + str(time.time()-start_time) + \" seconds\")\n        print(\"job status: \" + job.state)\n        joblist.pop(doneIdx)\n        njobs_finished=njobs_finished+1\n\nprint('\\n### Do you think that increasing the number of CPUs made a big difference? ###')\nprint('\\n### MaxRSS indicates the memory used ###')\n\n\n\nScaling up responsibly\nIn the loop above, you might have noticed something new: we’ve implemented another good practice by self-limiting the number of jobs we will run in parallel on the cluster. Indeed, it might be ok to launch 40 or even 100 parallel jobs if you are in a hurry, but the amount of CPUs in the cluster is not infinite, and neither is the amount of memory.\nNumber of CPUs: you can get this information by running sinfo -o%C in your terminal, or !sinfo -o%C in the notebook.\nAmount of memory: you can see this by running sinfo -o \"%P %n %m\" in your terminal (or with a ! in the notebook).\nIf it is a sunday and nobody is using the cluster, it is probably fine to increase maxjobs to 100 or more (note that if you require 4 cpu per task, it means that you are actually requiring 400 cpus overall!). But if it is 10.30pm on a tuesday, using this parameter might be the same as walking to the coffee machine and taking all the coffee reserves to your office! So, take the habit of setting your maxjobs-like parameter on a daily basis after checking sinfo -o%C.\n\n# check node and CPU information\nprint(\"### Node counts: \\nA: currently in use \\B available\")\n!sinfo -o%A\nprint(\"### CPU counts: \\nA: core you currently use (notebook) \\nI: available \\nO: unavailable (maintenance, down, etc) \\nT: total\")\n!sinfo -o%C\n\n# check some stats of our last job\nprint('### CPU time and MaxRSS of our last job (about 1Gb should be added to your MaxRSS in order to cover safely the memory needs of the python runtime)###')\nos.system(f'sacct -j {job.job_id} --format=\"CPUTime,MaxRSS\"')\n\n\n\nA more compact approach\nIn the above examples, we have decomposed most operations using for loops in order to illustrate the different concepts. But with more advanced methods we can compact a lot the code used above.\nThe example below (taken from submitit documentation) allows getting rid of the job submission loop and directly map our input arrays to job submissions, using executor.map_array and some asynchronous operations. Note that such compact approach might be more difficult to debug.\n\nimport asyncio\n\n# just add a/b, multiply by c and wait for b seconds\ndef simple_function(a, b, c):\n    output=(a + b)*c\n    time.sleep(b)\n    return output\n\n# define arrays matched in length for the iteration (if you have constant parameters, you can always duplicate them as done with \"c\" below)\na = [1, 2, 2, 1, 0, 1]\nb = [10, 20, 30, 40, 30, 10]\nc=[0.1]*len(b)\n\n# make sure our arrays are matched in length\nassert len(a)==len(b)==len(c)\n\n# prepare executor\nexecutor = submitit.AutoExecutor(folder=os.getcwd()+'/tuto_logs/')\n\n# define maxjobs to a low value to illustrate\nmaxjobs=3\n\n# the pupdate_parameters(slurm_array_parallelism=maxjobs, mem_gb=2, timeout_min=4, slurm_partition=\"CPU\", cpus_per_task=1)\n\n# execute the job (note the .map_array command that different from the .submit command used above)\njobs = executor.map_array(simple_function, a, b, c)  # just a list of jobs\n\n# print results as they become available\nfor aws in asyncio.as_completed([j.awaitable().result() for j in jobs]):\n    result = await aws\n    print(\"result of computation: \" + str(result))\n    arameter \"slurm_array_parallelism\" tells submitit to limit the number of concurrent jobs\nexecutor.\n# note that we use here an asynchronous method based on asyncio\n# it essential do something similar to what we were doing after \n# \"# wait for job completion\", but in a much more compact way\n# however, the reordering of outputs wrt to inputs is not implemented\n\n\n\nSubmitting and going home\nOften, when we have very long jobs, we want to submit these jobs, go home and come back the next day or the next week to check the results of their computations.\nIn this case, we should not expect our notebook to be still alive when we come back. Instead, we should adopt the more standard approach of writing down our results and load them in a new jupyter session afterwards!\nThis is way will we simulate in the final example below.\n\n# write in job_output within our home directory (~ is synonymous of /home/username/)\njob_output_folder=os.getcwd()+'/tuto_output/'\n\n# make sure our output folder exists\nif not os.path.exists(job_output_folder):\n  os.makedirs(job_output_folder)\n\n# just add a/b, multiply by c, wait for b seconds and write down the result to an output folder (c)\ndef simple_function_write(a, b, c):\n    output=(a + b)\n    time.sleep(b)\n    output_filepath=os.path.join(c, str(a) + '_' + str(b) + '.txt')\n    with open(output_filepath, 'w') as file:\n      file.write(f'{a}\\n')\n      file.write(f'{b}\\n')\n    \n# define arrays matched in length for the iteration (if you have constant parameters, you can always duplicate them as done with \"c\" below)\na = [1, 2, 2, 1, 0, 1]\nb = [10, 20, 30, 40, 30, 10]\nc=[job_output_folder]*len(b)\n\n# make sure our arrays are matched in length\nassert len(a)==len(b)==len(c)\n\n# prepare executor\nexecutor = submitit.AutoExecutor(folder=\"joblogs\")\n\n# define maxjobs to a low value to illustrate\nmaxjobs=3\n\n# the pupdate_parameters(slurm_array_parallelism=maxjobs, mem_gb=2, timeout_min=4, slurm_partition=\"CPU\", cpus_per_task=1)\n\n# execute the job (note the .map_array command that different from the .submit command used above)\njobs = executor.map_array(simple_function_write, a, b, c)  # just a list of jobs\nprint('### all jobs submitted ###')\nprint('the kernel will now be killed (and your notebook will crash) but you can see that your jobs keep running by typing squeue in the terminal')\n\n# wait a little and kill manually the kernel process\ntime.sleep(3)\nos.system('kill ' + str(os.getpid()))\n\nIt is a good practice to run os.system('kill ' + str(os.getpid())) if you don’t need to use the notebook anymore. Simply closing it may not interrupt the process and free the resources for the other users."
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part2.html#conclusion",
    "href": "en/codes_tutos/Tutorial_Cluster_Part2.html#conclusion",
    "title": "Part 2: Good job submission practice on SLURM clusters",
    "section": "Conclusion",
    "text": "Conclusion\nWhether you need several CPUs, and how to set memory and timeout parameters depend on the functions you use.\nIf you are not sure, look in the documentation of your packages or test for a performance improvement as we just did!"
  },
  {
    "objectID": "en/codes_tutos/Tutorial_Cluster_Part2.html#comments-questions",
    "href": "en/codes_tutos/Tutorial_Cluster_Part2.html#comments-questions",
    "title": "Part 2: Good job submission practice on SLURM clusters",
    "section": "Comments, questions?",
    "text": "Comments, questions?\nIf you have a Github account you can comment below."
  }
]