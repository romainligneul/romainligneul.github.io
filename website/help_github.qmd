---
title: Quick tutorial for Git/Github
toc: true
execute: 
  echo: true
  freeze: true
---

If you only plan to clone public repositories, you can probably just use `git clone https://` or simply download and unzip the repository of interest.

However, you will need to connect your command line to your Github account in the following scenarios:

- to clone private repositories that you own or one which you have been added as a collaborator.

- to perform any write operation in the repository (e.g. push, pull, merge, branch, etc.)

### If you have admin/sudo rights

1. If you don't have Github, create an account. 
   
2. Install the [Github CLI](https://cli.github.com/) utility that will allow you to connect your command line to your Github repository.
   
3. Restart your terminal (or Visual Code), reopen it, and type `gh auth login`. Choose Github.com, HTTPS, Login with a web browser (or use an auth token if you prefer)
   
4. CD to the directory where your *example.md* file is located and type `git init` in the command line. This preconfigures the folder as a Git repository.
5. In Github, create a new repository. For example, name it "example-collaborative-writing". If you create a public repository, everyone on the web will be able to see the repository and its content. If you create a private repository, only the Github contact that you will manually add to the repository will be able to see it and its content. Most often, you'll want to create private repositories to work with specific colleagues.
   
6. Back to your command line, type `git remote add origin https://github.com/yourGithubUsername/example-collaborative-writing.git` `git add .`, `git commit -m "first commit"`, `git branch -M main`, `git push -u origin main`. These steps are only needed for the creation of a new repository, then things will be much simpler. Refresh the web page of the newly create Github repository. You should see your *example.md* file appearing!

Now, each time that you'll want to start working on the file(s) contained in the folder/repository, you'll have to type `git pull` in the command line (make sure that our command line points to the correct folder, if not, `cd` to it), make your modification and then type: `git add .`, `git commit -m "any message"`, `git push` to upload your changes. You may even speed up this process further by using [this trick](#speed-up-the-saving-process-with-git).

This tutorial may be extended to cover other important aspects of Git. The two most important concepts are "branching" ([see here](https://www.atlassian.com/git/tutorials/using-branches)) and "merging" ([see here](https://www.atlassian.com/git/tutorials/using-branches/git-merge)). A final one is "conflict management" ([see here](https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts)), which is relatively easy to deal with in VScode. 

### If you don't have admin/sudo rights (e.g. on the cluster)

In this case, you can still connect your command line to your Github. The following is a simplified version of the information provided by [Github](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent).

1. If you don't have Github, create an account.

2. In the command line of your computer, type `ssh-keygen -t ed25519 -C "your_email@example.com"` and indicate a passphrase (can be simple but not empty). This will create a new SSH key. Replace `your_email@example.com` by the email address you've used when creating your github account (it should work with other valid addresses too).

3. Then, add the SSH key to your ssh client by typing: `ssh-add ~/.ssh/id_ed25519` (id_ed25519 is a default name: if you specified a name for your key, adjust accordingly). 

4. Still in the command line, type `cat ~/.ssh/id_ed25519.pub` (again, adjust name if necessary) and copy paste what comes out.

5. Finally, login into your Github account, go to the following address `https://github.com/settings/profile`and paste what you got from previous step (it should start with 'ssh-rsa' and finish with the email address you've provided at step 2).

6. That's it. Now each time you need to connect to Github from your command line, just type `ssh -T git@github.com`. You'll be asked the passphrase of your SSH key (as defined at step 2). 